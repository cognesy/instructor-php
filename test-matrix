#!/usr/bin/env bash

# Local test matrix runner for instructor-php
# Runs tests across multiple PHP versions and Composer dependency strategies
# Usage: ./test-matrix [php-version] [composer-flags]
# Examples:
#   ./test-matrix                    # Run all combinations
#   ./test-matrix 8.3                # Run all composer flags for PHP 8.3
#   ./test-matrix 8.3 --prefer-lowest # Run specific combination

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test matrix configuration (from .github/workflows/php.yml)
PHP_VERSIONS=("8.2" "8.3" "8.4")
COMPOSER_FLAGS=("--prefer-stable" "--prefer-lowest")

# Parse arguments
SELECTED_PHP="${1:-}"
SELECTED_COMPOSER="${2:-}"

# Results tracking
declare -a RESULTS
TOTAL=0
PASSED=0
FAILED=0

# Function to check if PHP version is available
check_php_version() {
    local version=$1
    if command -v "php$version" &> /dev/null; then
        echo "php$version"
        return 0
    elif command -v php &> /dev/null; then
        local current_version=$(php -r 'echo PHP_VERSION;' | cut -d. -f1,2)
        if [ "$current_version" = "$version" ]; then
            echo "php"
            return 0
        fi
    fi
    return 1
}

# Function to run a single test configuration
run_test() {
    local php_version=$1
    local composer_flags=$2
    local php_cmd=$(check_php_version "$php_version" || echo "")

    if [ -z "$php_cmd" ]; then
        echo -e "${YELLOW}⊘ PHP $php_version not available - SKIPPING${NC}"
        RESULTS+=("SKIP: PHP $php_version ($composer_flags)")
        return 0
    fi

    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BLUE}▶ Testing PHP $php_version with $composer_flags${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    TOTAL=$((TOTAL + 1))

    # Clean vendor directory
    if [ -d vendor ]; then
        echo "🧹 Cleaning vendor directory..."
        rm -rf vendor
    fi

    # Install dependencies
    echo "📦 Installing dependencies with $composer_flags..."
    if ! $php_cmd $(which composer) update --no-interaction $composer_flags; then
        echo -e "${RED}✗ Composer install FAILED${NC}"
        RESULTS+=("FAIL: PHP $php_version ($composer_flags) - Composer install failed")
        FAILED=$((FAILED + 1))
        return 1
    fi

    # Regenerate autoloader
    echo "🔄 Regenerating autoloader..."
    $php_cmd $(which composer) dump-autoload

    # Run tests
    echo "🧪 Running test suite..."
    if $php_cmd ./vendor/bin/pest --testsuite=Unit,Feature; then
        echo -e "\n${GREEN}✓ Tests PASSED for PHP $php_version ($composer_flags)${NC}"
        RESULTS+=("PASS: PHP $php_version ($composer_flags)")
        PASSED=$((PASSED + 1))
        return 0
    else
        echo -e "\n${RED}✗ Tests FAILED for PHP $php_version ($composer_flags)${NC}"
        RESULTS+=("FAIL: PHP $php_version ($composer_flags)")
        FAILED=$((FAILED + 1))
        return 1
    fi
}

# Main execution
echo -e "${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║         Local GitHub Test Matrix Runner                ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"

# Determine what to run
if [ -n "$SELECTED_PHP" ] && [ -n "$SELECTED_COMPOSER" ]; then
    # Run single combination
    run_test "$SELECTED_PHP" "$SELECTED_COMPOSER"
elif [ -n "$SELECTED_PHP" ]; then
    # Run all composer flags for specific PHP version
    for composer in "${COMPOSER_FLAGS[@]}"; do
        run_test "$SELECTED_PHP" "$composer"
    done
elif [ -n "$SELECTED_COMPOSER" ]; then
    # Run all PHP versions for specific composer flags
    for php in "${PHP_VERSIONS[@]}"; do
        run_test "$php" "$SELECTED_COMPOSER"
    done
else
    # Run full matrix
    for php in "${PHP_VERSIONS[@]}"; do
        for composer in "${COMPOSER_FLAGS[@]}"; do
            run_test "$php" "$composer"
        done
    done
fi

# Print summary
echo -e "\n${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║                    Test Summary                        ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}\n"

for result in "${RESULTS[@]}"; do
    if [[ $result == PASS:* ]]; then
        echo -e "${GREEN}✓ ${result#PASS: }${NC}"
    elif [[ $result == FAIL:* ]]; then
        echo -e "${RED}✗ ${result#FAIL: }${NC}"
    else
        echo -e "${YELLOW}⊘ ${result#SKIP: }${NC}"
    fi
done

echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "Total: $TOTAL | ${GREEN}Passed: $PASSED${NC} | ${RED}Failed: $FAILED${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

# Exit with error if any tests failed
if [ $FAILED -gt 0 ]; then
    exit 1
fi
