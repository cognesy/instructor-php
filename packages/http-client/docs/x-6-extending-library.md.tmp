## Extending the Library

The Instructor HTTP client API is designed to be extensible. Here are some examples of how you can extend the library beyond just creating custom drivers.

### Creating a Specialized Client Wrapper

You can create a specialized client wrapper that encapsulates all the HTTP logic for a specific API:

```php
<?php

namespace YourNamespace\Api;

use Cognesy\Http\HttpClient;
use Cognesy\Http\Data\HttpClientRequest;
use Cognesy\Http\Exceptions\RequestException;

class WeatherApiClient
{
    private HttpClient $client;
    private string $apiKey;
    private string $baseUrl;

    public function __construct(
        HttpClient $client,
        string $apiKey,
        string $baseUrl = 'https://api.weather.example.com'
    ) {
        $this->client = $client;
        $this->apiKey = $apiKey;
        $this->baseUrl = rtrim($baseUrl, '/');
    }

    public function getCurrentWeather(string $city): array
    {
        $request = new HttpClientRequest(
            url: "{$this->baseUrl}/current",
            method: 'GET',
            headers: [
                'Accept' => 'application/json',
                'Authorization' => "Bearer {$this->apiKey}",
            ],
            body: [],
            options: [
                'query' => ['city' => $city],
            ]
        );

        try {
            $response = $this->client->handle($request);

            if ($response->statusCode() !== 200) {
                $this->handleErrorResponse($response);
            }

            return json_decode($response->body(), true);
        } catch (RequestException $e) {
            throw new WeatherApiException("Failed to get current weather: {$e->getMessage()}", 0, $e);
        }
    }

    public function getForecast(string $city, int $days = 5): array
    {
        $request = new HttpClientRequest(
            url: "{$this->baseUrl}/forecast",
            method: 'GET',
            headers: [
                'Accept' => 'application/json',
                'Authorization' => "Bearer {$this->apiKey}",
            ],
            body: [],
            options: [
                'query' => [
                    'city' => $city,
                    'days' => $days,
                ],
            ]
        );

        try {
            $response = $this->client->handle($request);

            if ($response->statusCode() !== 200) {
                $this->handleErrorResponse($response);
            }

            return json_decode($response->body(), true);
        } catch (RequestException $e) {
            throw new WeatherApiException("Failed to get forecast: {$e->getMessage()}", 0, $e);
        }
    }

    private function handleErrorResponse(HttpClientResponse $response): void
    {
        $statusCode = $response->statusCode();
        $errorData = json_decode($response->body(), true);
        $errorMessage = $errorData['error'] ?? "HTTP Error: $statusCode";

        switch ($statusCode) {
            case 401:
                throw new WeatherApiAuthException("Authentication failed: $errorMessage");

            case 404:
                throw new WeatherApiNotFoundException("Resource not found: $errorMessage");

            case 429:
                throw new WeatherApiRateLimitException("Rate limit exceeded: $errorMessage");

            default:
                throw new WeatherApiException("API error: $errorMessage", $statusCode);
        }
    }
}

// Custom exceptions
class WeatherApiException extends \Exception {}
class WeatherApiAuthException extends WeatherApiException {}
class WeatherApiNotFoundException extends WeatherApiException {}
class WeatherApiRateLimitException extends WeatherApiException {}
```

Usage:

```php
$client = new HttpClient('guzzle');
$weatherApi = new WeatherApiClient($client, 'your-api-key');

try {
    $currentWeather = $weatherApi->getCurrentWeather('London');
    echo "Current temperature: {$currentWeather['temperature']}°C\n";

    $forecast = $weatherApi->getForecast('London', 3);
    echo "3-day forecast:\n";
    foreach ($forecast['days'] as $day) {
        echo "- {$day['date']}: {$day['temperature']}°C, {$day['conditions']}\n";
    }
} catch (WeatherApiAuthException $e) {
    echo "Authentication error: {$e->getMessage()}\n";
} catch (WeatherApiRateLimitException $e) {
    echo "Rate limit exceeded. Please try again later.\n";
} catch (WeatherApiException $e) {
    echo "Weather API error: {$e->getMessage()}\n";
}
```

### Creating an API Resource Factory

For more complex APIs, you can create a resource factory pattern:

```php
<?php

namespace YourNamespace\Api;

use Cognesy\Http\HttpClient;

class ApiClient
{
    private HttpClient $client;
    private string $apiKey;
    private string $baseUrl;
    private array $resources = [];

    public function __construct(
        HttpClient $client,
        string $apiKey,
        string $baseUrl = 'https://api.example.com'
    ) {
        $this->client = $client;
        $this->apiKey = $apiKey;
        $this->baseUrl = rtrim($baseUrl, '/');
    }

    public function users(): UserResource
    {
        return $this->getResource(UserResource::class);
    }

    public function products(): ProductResource
    {
        return $this->getResource(ProductResource::class);
    }

    public function orders(): OrderResource
    {
        return $this->getResource(OrderResource::class);
    }

    private function getResource(string $resourceClass): object
    {
        if (!isset($this->resources[$resourceClass])) {
            $this->resources[$resourceClass] = new $resourceClass($this->client, $this->apiKey, $this->baseUrl);
        }

        return $this->resources[$resourceClass];
    }
}

abstract class ApiResource
{
    protected HttpClient $client;
    protected string $apiKey;
    protected string $baseUrl;
    protected string $resourcePath;

    public function __construct(HttpClient $client, string $apiKey, string $baseUrl)
    {
        $this->client = $client;
        $this->apiKey = $apiKey;
        $this->baseUrl = $baseUrl;
        $this->resourcePath = $this->getResourcePath();
    }

    abstract protected function getResourcePath(): string;

    protected function createRequest(string $method, string $path, array $body = [], array $query = []): HttpClientRequest
    {
        $url = $this->baseUrl . '/' . $this->resourcePath;
        if ($path) {
            $url .= '/' . ltrim($path, '/');
        }

        if (!empty($query)) {
            $url .= '?' . http_build_query($query);
        }

        return new HttpClientRequest(
            url: $url,
            method: $method,
            headers: [
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
                'Authorization' => "Bearer {$this->apiKey}",
            ],
            body: $body,
            options: []
        );
    }

    protected function execute(HttpClientRequest $request): array
    {
        $response = $this->client->handle($request);

        if ($response->statusCode() >= 400) {
            $this->handleErrorResponse($response);
        }

        return json_decode($response->body(), true);
    }

    protected function handleErrorResponse(HttpClientResponse $response): void
    {
        // Implementation similar to previous example
    }
}

class UserResource extends ApiResource
{
    protected function getResourcePath(): string
    {
        return 'users';
    }

    public function get(int $id): array
    {
        $request = $this->createRequest('GET', (string)$id);
        return $this->execute($request);
    }

    public function list(int $page = 1, int $limit = 20): array
    {
        $request = $this->createRequest('GET', '', [], [
            'page' => $page,
            'limit' => $limit,
        ]);
        return $this->execute($request);
    }

    public function create(array $userData): array
    {
        $request = $this->createRequest('POST', '', $userData);
        return $this->execute($request);
    }

    public function update(int $id, array $userData): array
    {
        $request = $this->createRequest('PUT', (string)$id, $userData);
        return $this->execute($request);
    }

    public function delete(int $id): array
    {
        $request = $this->createRequest('DELETE', (string)$id);
        return $this->execute($request);
    }
}

class ProductResource extends ApiResource
{
    protected function getResourcePath(): string
    {
        return 'products';
    }

    // Similar methods as UserResource plus product-specific methods
}

class OrderResource extends ApiResource
{
    protected function getResourcePath(): string
    {
        return 'orders';
    }

    // Order-specific methods
}
```

Usage:

```php
$client = new HttpClient();
$api = new ApiClient($client, 'your-api-key');

// Work with users
$user = $api->users()->get(123);
$newUser = $api->users()->create([
    'name' => 'Jane Doe',
    'email' => 'jane@example.com',
]);

// Work with products
$products = $api->products()->list(1, 50);

// Work with orders
$order = $api->orders()->get(456);
```

This approach creates a clean, fluent API for working with RESTful services while leveraging the Instructor HTTP client API's flexibility and extensibility.

### Building Custom Event Subscribers

You can extend the event system by creating custom event subscribers:

```php
<?php

namespace YourNamespace\Http\EventSubscribers;

use Cognesy\Http\Events\HttpRequestSent;
use Cognesy\Http\Events\HttpResponseReceived;
use Cognesy\Http\Events\HttpRequestFailed;
use Cognesy\Utils\Events\EventDispatcher;
use Psr\Log\LoggerInterface;

class ApiMonitoringSubscriber
{
    private LoggerInterface $logger;
    private array $requestTimes = [];

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    public function register(EventDispatcher $dispatcher): void
    {
        $dispatcher->listen(HttpRequestSent::class, [$this, 'onRequestSent']);
        $dispatcher->listen(HttpResponseReceived::class, [$this, 'onResponseReceived']);
        $dispatcher->listen(HttpRequestFailed::class, [$this, 'onRequestFailed']);
    }

    public function onRequestSent(HttpRequestSent $event): void
    {
        // Generate a unique ID for this request
        $requestId = uniqid('req_');

        // Store the start time
        $this->requestTimes[$requestId] = [
            'url' => $event->url,
            'method' => $event->method,
            'start_time' => microtime(true),
        ];

        // Attach the ID to the event for correlation
        $event->requestId = $requestId;

        // Log the request
        $this->logger->info("API Request: {$event->method} {$event->url}", [
            'request_id' => $requestId,
            'headers' => $this->sanitizeHeaders($event->headers),
            'body' => $event->body,
        ]);
    }

    public function onResponseReceived(HttpResponseReceived $event): void
    {
        // Find the matching request by correlation ID
        $requestId = $event->requestId ?? null;

        if ($requestId && isset($this->requestTimes[$requestId])) {
            $requestData = $this->requestTimes[$requestId];
            $duration = round((microtime(true) - $requestData['start_time']) * 1000, 2);

            // Log the response
            $this->logger->info("API Response: HTTP {$event->statusCode} for {$requestData['method']} {$requestData['url']}", [
                'request_id' => $requestId,
                'status_code' => $event->statusCode,
                'duration_ms' => $duration,
            ]);

            // Send metrics to monitoring system
            $this->sendMetrics($requestData['url'], $requestData['method'], $event->statusCode, $duration);

            // Clean up
            unset($this->requestTimes[$requestId]);
        }
    }

    public function onRequestFailed(HttpRequestFailed $event): void
    {
        // Find the matching request by correlation ID
        $requestId = $event->requestId ?? null;

        if ($requestId && isset($this->requestTimes[$requestId])) {
            $requestData = $this->requestTimes[$requestId];
            $duration = round((microtime(true) - $requestData['start_time']) * 1000, 2);

            // Log the failure
            $this->logger->error("API Request Failed: {$requestData['method']} {$requestData['url']}", [
                'request_id' => $requestId,
                'error' => $event->errors,
                'duration_ms' => $duration,
            ]);

            // Send failure metrics
            $this->sendFailureMetrics($requestData['url'], $requestData['method'], $event->errors, $duration);

            // Clean up
            unset($this->requestTimes[$requestId]);
        }
    }

    private function sanitizeHeaders(array $headers): array
    {
        // Remove sensitive information like API keys
        $sensitiveHeaders = ['Authorization', 'X-Api-Key'];

        foreach ($sensitiveHeaders as $header) {
            if (isset($headers[$header])) {
                $headers[$header] = '[REDACTED]';
            }
        }

        return $headers;
    }

    private function sendMetrics(string $url, string $method, int $statusCode, float $duration): void
    {
        // Implementation to send metrics to monitoring system
        // (StatsD, Prometheus, etc.)
    }

    private function sendFailureMetrics(string $url, string $method, string $error, float $duration): void
    {
        // Implementation to send failure metrics
    }
}
```

Usage:

```php
$logger = new YourLogger();
$subscriber = new ApiMonitoringSubscriber($logger);

$events = new EventDispatcher();
$subscriber->register($events);

$client = new HttpClient('guzzle', $events);
```

This approach allows you to extend the HTTP client with custom monitoring, logging, or other functionality without modifying the core library code.

By using these extension patterns, you can adapt the Instructor HTTP client API to a wide variety of use cases while maintaining a clean and consistent codebase.
