---
title: Using the Mock HTTP Driver
description: 'Learn how to use the Mock HTTP Driver in the Instructor HTTP client API.'
---

The library includes a `MockHttpDriver` that's useful for testing. This driver doesn't make actual HTTP requests but returns predefined responses.

## Basic Usage

```php
use Cognesy\Http\Drivers\Mock\MockHttpResponse;
use Cognesy\Http\Drivers\Mock\MockHttpDriver;
use Cognesy\Http\HttpClient;
use Cognesy\Http\Data\HttpClientRequest;

// Create a mock driver
$mockDriver = new MockHttpDriver();

// Define a response for a specific request
$mockDriver->addResponse(
    // Response to return
    MockHttpResponse::success(
        statusCode: 200,
        headers: ['Content-Type' => 'application/json'],
        body: json_encode(['name' => 'John', 'email' => 'john@example.com'])
    ),
    // URL to match
    'https://api.example.com/users/123',
    // Method to match
    'GET',
    // Body to match (optional)
    null
);

// Use the mock driver in a client
$client = new HttpClient();
$client->withDriver($mockDriver);

// Make a request
$request = new HttpRequest(
    url: 'https://api.example.com/users/123',
    method: 'GET',
    headers: [],
    body: [],
    options: []
);

// This will return the mock response without making an actual HTTP request
$response = $client->withRequest($request)->get();

echo "Status: " . $response->statusCode() . "\n";
echo "Body: " . $response->body() . "\n";
```

## Advanced Response Matching

The `MockHttpDriver` supports advanced response matching using callbacks:

```php
// Match URLs with a pattern
$mockDriver->addResponse(
    MockHttpResponse::success(200, [], 'Success'),
    // Match URLs that start with "https://api.example.com/users"
    function ($url) {
        return strpos($url, 'https://api.example.com/users') === 0;
    },
    'POST'
);

// Match request bodies
$mockDriver->addResponse(
    MockHttpResponse::success(201, [], json_encode(['id' => 456])),
    'https://api.example.com/users',
    'POST',
    // Match requests with a specific email
    function ($body) {
        $data = json_decode($body, true);
        return isset($data['email']) && $data['email'] === 'test@example.com';
    }
);
```

## Dynamic Response Generation

You can generate responses dynamically based on the request:

```php
// Generate response based on the request
$mockDriver->addResponse(
    // Callback to generate the response
    function (HttpClientRequest $request) {
        $userId = basename($request->url());

        return MockHttpResponse::success(
            statusCode: 200,
            headers: ['Content-Type' => 'application/json'],
            body: json_encode([
                'id' => $userId,
                'name' => "User $userId",
                'email' => "user$userId@example.com",
            ])
        );
    },
    // Match any URL that ends with a number
    function ($url) {
        return preg_match('/\/users\/\d+$/', $url);
    },
    'GET'
);
```

## Error Responses

You can simulate error responses:

```php
// Add an error response
$mockDriver->addResponse(
    MockHttpResponse::error(
        statusCode: 404,
        headers: [],
        body: json_encode(['error' => 'User not found'])
    ),
    'https://api.example.com/users/999',
    'GET'
);

// Add a server error
$mockDriver->addResponse(
    MockHttpResponse::error(
        statusCode: 500,
        headers: [],
        body: json_encode(['error' => 'Internal server error'])
    ),
    'https://api.example.com/error',
    'GET'
);
```

## Streaming Responses

You can also mock streaming responses:

```php
// Create a streaming response with chunks
$mockDriver->addResponse(
    MockHttpResponse::streaming(
        statusCode: 200,
        headers: ['Content-Type' => 'text/event-stream'],
        chunks: [
            "data: {\"id\": 1, \"text\": \"Hello\"}\n\n",
            "data: {\"id\": 2, \"text\": \"World\"}\n\n",
            "data: {\"id\": 3, \"text\": \"!\"}\n\n"
        ]
    ),
    'https://api.example.com/stream',
    'GET'
);
```

## Inspecting Received Requests

The `MockHttpDriver` allows you to inspect the requests it has received:

```php
// Get all received requests
$requests = $mockDriver->getReceivedRequests();

// Get the last received request
$lastRequest = $mockDriver->getLastRequest();

if ($lastRequest) {
    echo "Last request URL: " . $lastRequest->url() . "\n";
    echo "Last request method: " . $lastRequest->method() . "\n";
    echo "Last request body: " . $lastRequest->body()->toString() . "\n";
}

// Reset the mock by clearing all received requests
$mockDriver->reset();

// Clear all predefined responses
$mockDriver->clearResponses();
```

## Using MockHttpDriver in Tests

The `MockHttpDriver` is particularly useful in unit tests:

```php
class UserServiceTest extends TestCase
{
    private MockHttpDriver $mockDriver;
    private HttpClient $client;
    private UserService $userService;

    protected function setUp(): void
    {
        parent::setUp();

        // Create a mock driver
        $this->mockDriver = new MockHttpDriver();

        // Create a client with the mock driver
        $this->client = new HttpClient();
        $this->client->withDriver($this->mockDriver);

        // Create the service with the mocked client
        $this->userService = new UserService($this->client);
    }

    public function testGetUser(): void
    {
        // Set up a mock response
        $this->mockDriver->addResponse(
            MockHttpResponse::success(
                statusCode: 200,
                headers: ['Content-Type' => 'application/json'],
                body: json_encode([
                    'id' => 123,
                    'name' => 'John Doe',
                    'email' => 'john@example.com'
                ])
            ),
            'https://api.example.com/users/123',
            'GET'
        );

        // Call the method that uses the HTTP client
        $user = $this->userService->getUser(123);

        // Assert the result
        $this->assertEquals(123, $user->id);
        $this->assertEquals('John Doe', $user->name);
        $this->assertEquals('john@example.com', $user->email);

        // Assert that the expected request was made
        $lastRequest = $this->mockDriver->getLastRequest();
        $this->assertEquals('https://api.example.com/users/123', $lastRequest->url());
        $this->assertEquals('GET', $lastRequest->method());
    }

    public function testCreateUser(): void
    {
        // Set up a mock response
        $this->mockDriver->addResponse(
            MockHttpResponse::success(
                statusCode: 201,
                headers: ['Content-Type' => 'application/json'],
                body: json_encode([
                    'id' => 456,
                    'name' => 'Jane Doe',
                    'email' => 'jane@example.com'
                ])
            ),
            'https://api.example.com/users',
            'POST'
        );

        // Call the method that uses the HTTP client
        $user = $this->userService->createUser('Jane Doe', 'jane@example.com');

        // Assert the result
        $this->assertEquals(456, $user->id);
        $this->assertEquals('Jane Doe', $user->name);
        $this->assertEquals('jane@example.com', $user->email);

        // Assert that the expected request was made
        $lastRequest = $this->mockDriver->getLastRequest();
        $this->assertEquals('https://api.example.com/users', $lastRequest->url());
        $this->assertEquals('POST', $lastRequest->method());

        // Verify the request payload
        $requestBody = json_decode($lastRequest->body()->toString(), true);
        $this->assertEquals('Jane Doe', $requestBody['name']);
        $this->assertEquals('jane@example.com', $requestBody['email']);
    }

    public function testUserNotFound(): void
    {
        // Set up a mock response for a 404 error
        $this->mockDriver->addResponse(
            MockHttpResponse::error(
                statusCode: 404,
                headers: ['Content-Type' => 'application/json'],
                body: json_encode(['error' => 'User not found'])
            ),
            'https://api.example.com/users/999',
            'GET'
        );

        // Expect an exception when the user is not found
        $this->expectException(UserNotFoundException::class);

        // Call the method that should throw an exception
        $this->userService->getUser(999);
    }
}
```

## Best Practices for Testing with MockHttpDriver

1. **Setup in Test Fixtures**: Initialize the `MockHttpDriver` in your test fixtures (like the `setUp` method) to reuse it across multiple tests.

2. **Clear Between Tests**: Reset the mock driver between tests to avoid cross-test contamination.

3. **Verify Requests**: Don't just assert the results; also verify that the correct requests were made with the expected parameters.

4. **Test Error Cases**: Set up mock error responses to test your application's error handling.

5. **Test Streaming**: For streaming APIs, set up streaming responses with multiple chunks to test your streaming processing code.

6. **Replicate Real-World Scenarios**: Try to replicate real-world API behavior as closely as possible in your mocks, including edge cases.

7. **Use Pattern Matching**: For flexible matching of URLs or request bodies, use the callback-based matching capabilities.



## Example: Testing an AI Chat Application

Here's a more complete example of testing an AI chat application with the `MockHttpDriver`:

```php
class AiChatTest extends TestCase
{
    private MockHttpDriver $mockDriver;
    private HttpClient $client;
    private AiChatService $chatService;

    protected function setUp(): void
    {
        parent::setUp();

        $this->mockDriver = new MockHttpDriver();
        $this->client = new HttpClient();
        $this->client->withDriver($this->mockDriver);
        $this->chatService = new AiChatService($this->client);
    }

    protected function tearDown(): void
    {
        $this->mockDriver->reset();
        $this->mockDriver->clearResponses();

        parent::tearDown();
    }

    public function testSendMessage(): void
    {
        // Set up a streaming response for the AI API
        $this->mockDriver->addResponse(
            MockHttpResponse::streaming(
                statusCode: 200,
                headers: ['Content-Type' => 'text/event-stream'],
                chunks: [
                    "data: {\"id\":\"1\",\"delta\":\"Hello\"}\n\n",
                    "data: {\"id\":\"2\",\"delta\":\", \"}\n\n",
                    "data: {\"id\":\"3\",\"delta\":\"how\"}\n\n",
                    "data: {\"id\":\"4\",\"delta\":\" can\"}\n\n",
                    "data: {\"id\":\"5\",\"delta\":\" I\"}\n\n",
                    "data: {\"id\":\"6\",\"delta\":\" help\"}\n\n",
                    "data: {\"id\":\"7\",\"delta\":\" you\"}\n\n",
                    "data: {\"id\":\"8\",\"delta\":\"?\"}\n\n",
                    "data: [DONE]\n\n"
                ]
            ),
            'https://api.example.com/ai/chat',
            'POST',
            function ($body) {
                $data = json_decode($body, true);
                return isset($data['messages']) &&
                       count($data['messages']) > 0 &&
                       $data['messages'][0]['content'] === 'Hi there!';
            }
        );

        // Call the chat service
        $response = $this->chatService->sendMessage('Hi there!');

        // Assert the response
        $this->assertEquals('Hello, how can I help you?', $response);

        // Verify the request
        $lastRequest = $this->mockDriver->getLastRequest();
        $this->assertEquals('POST', $lastRequest->method());
        $this->assertEquals('https://api.example.com/ai/chat', $lastRequest->url());

        // Verify the request payload
        $requestBody = json_decode($lastRequest->body()->toString(), true);
        $this->assertArrayHasKey('messages', $requestBody);
        $this->assertCount(1, $requestBody['messages']);
        $this->assertEquals('Hi there!', $requestBody['messages'][0]['content']);
    }

    public function testApiError(): void
    {
        // Set up an error response
        $this->mockDriver->addResponse(
            MockHttpResponse::error(
                statusCode: 429,
                headers: ['Content-Type' => 'application/json'],
                body: json_encode(['error' => 'Rate limit exceeded'])
            ),
            'https://api.example.com/ai/chat',
            'POST'
        );

        // Expect a rate limit exception
        $this->expectException(RateLimitException::class);

        // Call the chat service
        $this->chatService->sendMessage('This should fail');
    }

    public function testNetworkError(): void
    {
        // Set up a response that throws an exception
        $this->mockDriver->addResponse(
            function () {
                throw new \RuntimeException('Network connection failed');
            },
            'https://api.example.com/ai/chat',
            'POST'
        );

        // Expect a network exception
        $this->expectException(NetworkException::class);

        // Call the chat service
        $this->chatService->sendMessage('This should fail due to network error');
    }
}
```

In this example, we're testing an AI chat service that uses the HTTP client to communicate with an AI API. We use the `MockHttpDriver` to simulate different responses from the API, including successful streaming responses, error responses, and network failures.

By using the `MockHttpDriver`, we can thoroughly test our application without making actual API calls, which makes our tests faster, more reliable, and independent of external services.

In the next chapter, we'll explore the middleware system, which allows you to add custom processing logic to your HTTP requests and responses.
) {}

    /**
     * Execute a pool of requests
     */
    public function pool(array $requests, ?int $maxConcurrent = null): array
    {
        $maxConcurrent = $maxConcurrent ?? $this->config->maxConcurrent;
        $results = [];

        // Implement your pool execution logic here
        // This will depend on your HTTP client's concurrent request capabilities

        // Example implementation (pseudocode):
        $promises = [];

        foreach ($requests as $index => $request) {
            if (!$request instanceof HttpRequest) {
                throw new \InvalidArgumentException('Invalid request type in pool');
            }

            // Create a promise for each request
            $promises[$index] = $this->yourHttpClient->asyncRequest(
                $request->method(),
                $request->url(),
                [
                    'headers' => $request->headers(),
                    'body' => $request->body()->toString(),
                    'timeout' => $this->config->requestTimeout,
                    'connect_timeout' => $this->config->connectTimeout,
                ]
            );
        }

        // Wait for all promises to complete
        $responses = $this->yourHttpClient->wait($promises, [
            'concurrency' => $maxConcurrent,
            'timeout' => $this->config->poolTimeout,
        ]);

        // Process the responses
        foreach ($responses as $index => $response) {
            try {
                if ($response instanceof \Exception) {
                    // Handle error
                    $results[$index] = $this->handleError($response);
                } else {
                    // Handle success
                    $this->events->dispatch(new HttpResponseReceived($response->getStatusCode()));

                    $results[$index] = Result::success(new YourHttpResponse($response));
                }
            } catch (\Exception $e) {
                $results[$index] = $this->handleError($e);
            }
        }

        // Return the results in the correct order
        ksort($results);
        return array_values($results);
    }

    /**
     * Handle an error result
     */
    private function handleError(\Exception $error): Result
    {
        if ($this->config->failOnError) {
            throw new RequestException($error);
        }

        $this->events->dispatch(new HttpRequestFailed(
            'Pool request',
            'POOL',
            [],
            [],
            $error->getMessage()
        ));

        return Result::failure($error);
    }
}
```

## Using Your Custom Driver

Once you've implemented your custom driver, you can use it with the `HttpClient`:

```php
use Cognesy\Http\HttpClient;
use Cognesy\Http\Config\HttpClientConfig;
use YourNamespace\Http\Drivers\CustomHttpDriver;

// Create a configuration for your custom driver
$config = new HttpClientConfig(
    httpClientType: 'custom',
    connectTimeout: 3,
    requestTimeout: 30,
    idleTimeout: -1,
    maxConcurrent: 5,
    poolTimeout: 60,
    failOnError: true
);

// Create your custom driver
$customDriver = new CustomHttpDriver($config);

// Create a client with your driver
$client = new HttpClient();
$client->withDriver($customDriver);

// Use the client as usual
$request = new HttpRequest(/* ... */);
$response = $client->withRequest($request)->get();
```

## Using the Mock HTTP Driver

The library includes a `MockHttpDriver` that's useful for testing. This driver doesn't make actual HTTP requests but returns predefined responses.

### Basic Usage

```php
use Cognesy\Http\Drivers\Mock\MockHttpResponse;
use Cognesy\Http\Drivers\Mock\MockHttpDriver;
use Cognesy\Http\HttpClient;
use Cognesy\Http\Data\HttpClientRequest;

// Create a mock driver
$mockDriver = new MockHttpDriver();

// Define a response for a specific request
$mockDriver->addResponse(
    // Response to return
    MockHttpResponse::success(
        statusCode: 200,
        headers: ['Content-Type' => 'application/json'],
        body: json_encode(['name' => 'John', 'email' => 'john@example.com'])
    ),
    // URL to match
    'https://api.example.com/users/123',
    // Method to match
    'GET',
    // Body to match (optional)
    null
);

// Use the mock driver in a client
$client = new HttpClient();
$client->withDriver($mockDriver);

// Make a request
$request = new HttpRequest(
    url: 'https://api.example.com/users/123',
    method: 'GET',
    headers: [],
    body: [],
    options: []
);

// This will return the mock response without making an actual HTTP request
$response = $client->withRequest($request)->get();

echo "Status: " . $response->statusCode() . "\n";
echo "Body: " . $response->body() . "\n";
```

### Advanced Response Matching

The `MockHttpDriver` supports advanced response matching using callbacks:

```php
// Match URLs with a pattern
$mockDriver->addResponse(
    MockHttpResponse::success(200, [], 'Success'),
    // Match URLs that start with "https://api.example.com/users"
    function ($url) {
        return strpos($url, 'https://api.example.com/users') === 0;
    },
    'POST'
);

// Match request bodies
$mockDriver->addResponse(
    MockHttpResponse::success(201, [], json_encode(['id' => 456])),
    'https://api.example.com/users',
    'POST',
    // Match requests with a specific email
    function ($body) {
        $data = json_decode($body, true);
        return isset($data['email']) && $data['email'] === 'test@example.com';
    }
);
```

### Dynamic Response Generation

You can generate responses dynamically based on the request:

```php
// Generate response based on the request
$mockDriver->addResponse(
    // Callback to generate the response
    function (HttpClientRequest $request) {
        $userId = basename($request->url());

        return MockHttpResponse::success(
            statusCode: 200,
            headers: ['Content-Type' => 'application/json'],
            body: json_encode([
                'id' => $userId,
                'name' => "User $userId",
                'email' => "user$userId@example.com",
            ])
        );
    },
    // Match any URL that ends with a number
    function ($url) {
        return preg_match('/\/users\/\d+$/', $url);
    },
    'GET'
);
```

### Error Responses

You can simulate error responses:

```php
// Add an error response
$mockDriver->addResponse(
    MockHttpResponse::error(
        statusCode: 404,
        headers: [],
        body: json_encode(['error' => 'User not found'])
    ),
    'https://api.example.com/users/999',
    'GET'
);

// Add a server error
$mockDriver->addResponse(
    MockHttpResponse::error(
        statusCode: 500,
        headers: [],
        body: json_encode(['error' => 'Internal server error'])
    ),
    'https://api.example.com/error',
    'GET'
);
```

### Streaming Responses

You can also mock streaming responses:

```php
// Create a streaming response with chunks
$mockDriver->addResponse(
    MockHttpResponse::streaming(
        statusCode: 200,
        headers: ['Content-Type' => 'text/event-stream'],
        chunks: [
            "data: {\"id\": 1, \"text\": \"Hello\"}\n\n",
            "data: {\"id\": 2, \"text\": \"World\"}\n\n",
            "data: {\"id\": 3, \"text\": \"!\"}\n\n"
        ]
    ),
    'https://api.example.com/stream',
    'GET'
);
```

### Inspecting Received Requests

The `MockHttpDriver` allows you to inspect the requests it has received:

```php
// Get all received requests
$requests = $mockDriver->getReceivedRequests();

// Get the last received request
$lastRequest = $mockDriver->getLastRequest();

if ($lastRequest) {
    echo "Last request URL: " . $lastRequest->url() . "\n";
    echo "Last request method: " . $lastRequest->method() . "\n";
    echo "Last request body: " . $lastRequest->body()->toString() . "\n";
}

// Reset the mock by clearing all received requests
$mockDriver->reset();

// Clear all predefined responses
$mockDriver->clearResponses();
```
