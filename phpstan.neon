includes:
  - vendor/phpstan/phpstan-strict-rules/rules.neon

parameters:
  level: 8
  paths:
    - packages/addons/src
    - packages/auxiliary/src
    - packages/config/src
    - packages/doctor/src
    - packages/dynamic/src
    - packages/evals/src
    - packages/events/src
    - packages/http-client/src
    - packages/hub/src
    - packages/instructor/src
    - packages/messages/src
    - packages/pipeline/src
    - packages/polyglot/src
    - packages/schema/src
    - packages/setup/src
    - packages/stream/src
    - packages/tell/src
    - packages/templates/src
    - packages/utils/src
    - config
  excludePaths:
    - packages/*/tests/Fixtures/*
    - packages/*/tests/Support/*
    - packages/experimental
    - examples/
  reportUnmatchedIgnoredErrors: false
  checkMissingCallableSignature: true
  checkUninitializedProperties: true
  checkDynamicProperties: true
  checkAlwaysTrueInstanceof: true
  checkAlwaysTrueStrictComparison: true
  checkPhpDocMethodSignatures: true
  treatPhpDocTypesAsCertain: false
  tmpDir: /tmp
  ignoreErrors:
    # Allow mixed types in specific contexts where needed
    - '#Parameter .* of .* has invalid type mixed#'
    # Allow array access on mixed - common in dynamic contexts
    - '#Cannot access offset .* on mixed#'
    # Ignore missing generic typehints
    -
      identifier: missingType.generics
    # Ignore missing type specifications in iterable types - arrays are meant to be flexible
    - '#.* has (no value type|parameter .* with no value type) specified in iterable type array#'
    # Ignore unused parameters - often used for interface compliance or future extensibility
    - '#.* has an unused parameter#'
    # Ignore PHPDoc tag references unknown parameter - often intentional for documentation
    - '#PHPDoc tag @param references unknown parameter#'
    # Ignore missing return type specification - often implied by context
    - '#.* has no return type specified#'
    # Ignore property type specifications in iterable types
    - '#Property .* type has no value type specified in iterable type array#'
    # Allow short ternary operator - it's a valid PHP feature
    - '#Short ternary operator is not allowed#'
    # Allow empty() construct - sometimes more readable than strict comparison
    - '#Construct empty\(\) is not allowed#'
    # Allow new static() - useful pattern for factory methods
    - '#Unsafe usage of new static\(\)#'
    # Allow dead catch blocks - defensive programming
    - '#Dead catch - .* is never thrown in the try block#'
    # Allow is_array() on array type - defensive type checking
    - '#Call to function is_array\(\) with array will always evaluate to true#'
    # Allow non-boolean in conditions - PHP type juggling is intentional
    - '#Only booleans are allowed in (a|an) (if condition|negated boolean|ternary operator condition)#'
    # Allow always-true instanceof checks - defensive programming
    - '#Instanceof between .* and .* will always evaluate to true#'
    # Allow unreachable else branches from ternary - code clarity
    - '#Else branch is unreachable because ternary operator condition is always true#'
    # Allow match expressions that don't handle all values - intentional design
    - '#Match expression does not handle remaining value#'
    # Allow unreachable match arms - code clarity and documentation
    - '#Match arm is unreachable because previous comparison is always true#'
    # Allow template type variance issues in processor composition - processors work via canProcess() runtime check
    - '#Parameter .* of class Cognesy\\Addons\\StepByStep\\StateProcessing\\StateProcessors constructor expects Cognesy\\Addons\\StepByStep\\StateProcessing\\CanProcessAnyState.*, Cognesy\\Addons\\StepByStep\\StateProcessing\\Processors\\(AppendStepMessages|AccumulateTokenUsage) given#'
    - '#Parameter \$processors of class Cognesy\\Addons\\Chat\\Chat constructor expects Cognesy\\Addons\\StepByStep\\StateProcessing\\CanApplyProcessors<Cognesy\\Addons\\Chat\\Data\\ChatState>, Cognesy\\Addons\\StepByStep\\StateProcessing\\CanApplyProcessors<Cognesy\\Addons\\Chat\\Data\\ChatState>\|null given#'
    - '#Parameter \$processors of class Cognesy\\Addons\\ToolUse\\ToolUse constructor expects Cognesy\\Addons\\StepByStep\\StateProcessing\\CanApplyProcessors<Cognesy\\Addons\\ToolUse\\Data\\ToolUseState>, Cognesy\\Addons\\StepByStep\\StateProcessing\\CanApplyProcessors<Cognesy\\Addons\\ToolUse\\Data\\ToolUseState>\|null given#'
    # Doctor package - properties initialized in registerServices() before use in registerCommands()
    - '#Access to an uninitialized property Cognesy\\Doctor\\Docs::\$#'
    # Doctor package - Parser tokens initialized in parse() method
    - '#Access to an uninitialized property Cognesy\\Doctor\\Markdown\\Internal\\Parser::\$tokens#'
    # Doctor package - mixed types from external libraries and reflection
    - '#Parameter \$document of class Cognesy\\Doctor\\Markdown\\MarkdownFile constructor expects.*mixed given#'
    - '#Parameter .1 \$document of method Cognesy\\Doctor\\Markdown\\MarkdownFile::withRoot\(\) expects.*mixed given#'
    - '#Cannot access property \$content on mixed#'
    - '#Generator expects value type.*mixed given#'
    - '#Parameter .1 \.\.\.\$children of class Cognesy\\Doctor\\Markdown\\Nodes\\DocumentNode constructor expects.*mixed given#'
    - '#Part .* \(mixed\) of encapsed string cannot be cast to string#'
    # Doctor package - Symfony Console returns mixed from getOption/getArgument
    - '#Parameter .* of method Cognesy\\Doctor\\Doctest\\Commands\\.*::.* expects .*, mixed given#'
    - '#Method Cognesy\\Doctor\\Doctest\\Commands\\.*::getRequiredOption\(\) should return string but returns mixed#'
    - '#Cannot cast mixed to string#'
    # Doctor package - unused properties in deprecated/archived code
    - '#Property Cognesy\\Doctor\\Archived\\.*::\$.* is never read#'
    # Doctor package - return type refinements
    - '#Method Cognesy\\Doctor\\Markdown\\.*::.* should return .* but returns .*#'
    - '#Method Cognesy\\Doctor\\Markdown\\Internal\\Parser::parseCodeBlock\(\) never returns#'
    - '#Strict comparison using !== .* will always evaluate to true#'
    - '#Unreachable statement#'
    # Doctor package - Doctest event constructors
    - '#Cognesy\\Doctor\\Doctest\\Events\\.*::__construct\(\) does not call parent constructor#'
    # Doctor package - Lexer/Parser properties initialized in parse/lex methods
    - '#Class Cognesy\\Doctor\\Doctest\\Internal\\.*Lexer has an uninitialized property#'
    - '#Class Cognesy\\Doctor\\Doctest\\Internal\\.*Parser has an uninitialized property#'
    # Doctor package - Doctest type issues
    - '#Parameter .* of class Cognesy\\Doctor\\Doctest\\Events\\.*#'
    - '#Method Cognesy\\Doctor\\Doctest\\.*::.* should return .* but returns .*#'
    - '#Cannot access property .* on .*\|null#'
    - '#Property .* does not accept mixed#'
    - '#has parameter .* with no value type specified in iterable#'
    - '#Call to function in_array\(\) requires parameter#'
    - '#Only booleans are allowed in an? .* condition#'
    # Doctor package - Lesson commands and Freeze with Symfony Console mixed types
    - '#Parameter .* of (function|static method|method) .* expects string, mixed given#'
    - '#Class Cognesy\\Doctor\\Markdown\\Internal\\Parser has an uninitialized property#'
    # Doctor package - broad suppression for mixed parameter constructors
    - '#Parameter \$.* of class Cognesy\\Doctor\\.*#'
    # Pipeline package - callable signature specifications for Legacy chain classes and operators
    - '#.* Cognesy\\Pipeline\\Legacy\\.* has .* with no signature specified for callable#'
    - '#.* Cognesy\\Pipeline\\Legacy\\.* type has no signature specified for (callable|Closure)#'
    - '#.* Cognesy\\Pipeline\\Operators\\.* has .* with no signature specified for callable#'
    - '#.* Cognesy\\Pipeline\\Operators\\.* type has no signature specified for (callable|Closure)#'
    - '#.* Cognesy\\Pipeline\\.* has .* with no signature specified for callable#'
    - '#.* Cognesy\\Pipeline\\.* type has no signature specified for (callable|Closure)#'
    - '#Undefined variable: \$this#' # Pest test context
    - '#Access to an undefined property Cognesy\\Utils\\TagMap\\Contracts\\TagInterface::\$name#' # TagInterface dynamic properties
    - '#.*callable.* will always evaluate to (true|false)#' # Callable type checks in pipeline
    - '#Parameter .* with type .* is not subtype of native type callable#' # Callable variance in pipeline
    - '#Cannot call method .* on Throwable\|null#' # Test assertions on nullable throwables
    - '#Unable to resolve the template type .* in call to function expect#' # Pest expect() generics
    - '#Call to an undefined method#' # Dynamic test methods
    - '#PHPDoc tag @param for parameter .* with type array<callable>#' # Generic callable arrays
    - '#Parameter .* expects callable\(.*\):.*, Closure\(.*\):.* given#' # Closure vs callable variance
    - '#Parameter .* of (class|static method|method) Cognesy\\Pipeline\\.* expects#' # Pipeline parameter type mismatches
    - '#Method Cognesy\\Pipeline\\.* invoked with .* parameter#' # Pipeline method invocation mismatches
    - '#PHPDoc tag @param for parameter .* contains unresolvable#' # Unresolvable parameter types
    - '#Method Cognesy\\Pipeline\\Operators\\.*::__construct\(\) has parameter .* with no value type specified#' # Operator constructors
    - '#Trying to invoke#' # Dynamic invocations in tests
    - '#Property .* \(.*\) does not accept#' # Property type mismatches in pipeline
    - '#Cannot call method .* on .*\|null#' # Nullable method calls in pipeline
    - '#Parameter .* of function .* expects resource#' # Resource type checks
    - '#Parameter .* should be contravariant with parameter#' # Contravariance in pipeline traits
    - '#Property class@anonymous.*::\$.* is never read, only written#' # Test anonymous class properties
    - '#Parameter .* of method Cognesy\\Utils\\TagMap\\TagQuery::only\(\) expects class-string.*class-string\|null given#' # TagQuery variadic class-string nullability
