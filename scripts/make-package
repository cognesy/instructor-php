#!/usr/bin/env php
<?php

/**
 * Package Creation Script
 * 
 * Creates a new subpackage based on the empty-new template and a JSON configuration file.
 * 
 * Usage: php scripts/create-package.php <config.json>
 */

if ($argc !== 2) {
    echo "Usage: php scripts/create-package.php <config.json>\n";
    echo "Example: php scripts/create-package.php package-config.json\n";
    exit(1);
}

$configFile = $argv[1];

if (!file_exists($configFile)) {
    echo "Error: Configuration file '{$configFile}' not found.\n";
    exit(1);
}

$config = json_decode(file_get_contents($configFile), true);

if ($config === null) {
    echo "Error: Invalid JSON in configuration file.\n";
    exit(1);
}

// Validate required fields
$requiredFields = ['package_name', 'namespace', 'package_title', 'package_description', 'target_directory'];
foreach ($requiredFields as $field) {
    if (!isset($config[$field]) || empty($config[$field])) {
        echo "Error: Missing required field '{$field}' in configuration.\n";
        exit(1);
    }
}

$templateDir = __DIR__ . '/../data/empty-new';
$targetDir = __DIR__ . '/../' . $config['target_directory'];

if (file_exists($targetDir)) {
    echo "Error: Target directory '{$config['target_directory']}' already exists.\n";
    exit(1);
}

echo "Creating package '{$config['package_name']}' in '{$config['target_directory']}'...\n";

// Create target directory
if (!mkdir($targetDir, 0755, true)) {
    echo "Error: Could not create target directory.\n";
    exit(1);
}

// Copy template files recursively
function copyTemplate($source, $dest, $config) {
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST
    );

    foreach ($iterator as $file) {
        $destPath = $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
        
        if ($file->isDir()) {
            if (!is_dir($destPath)) {
                mkdir($destPath, 0755, true);
            }
        } else {
            // Skip certain files that shouldn't be copied
            if ($file->getFilename() === 'composer.lock' || 
                strpos($file->getPathname(), '/vendor/') !== false) {
                continue;
            }
            
            $content = file_get_contents($file->getPathname());
            
            // Replace template placeholders
            $placeholders = [
                '{{PACKAGE_NAME}}' => $config['package_name'],
                '{{NAMESPACE}}' => $config['namespace'],
                '{{PACKAGE_TITLE}}' => $config['package_title'],
                '{{PACKAGE_DESCRIPTION}}' => $config['package_description']
            ];
            
            $content = str_replace(array_keys($placeholders), array_values($placeholders), $content);
            
            file_put_contents($destPath, $content);
        }
    }
}

try {
    copyTemplate($templateDir, $targetDir, $config);
    echo "Package created successfully!\n";
    echo "\nNext steps:\n";
    echo "1. cd {$config['target_directory']}\n";
    echo "2. composer install\n";
    echo "3. composer tests\n";
    echo "4. Start implementing your package functionality in src/\n";
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}